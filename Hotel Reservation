### **This specification was already passed in the previous submission**


### `IRoom interface` has been implemented by the `Room` class correctly. :white_check_mark:


Great job meeting this rubric item. It is a good design principle to program to an interface
In your Reservation model, you can add any room as long as it is an IRoom

Imagine that in the future the hotel adds a PremiumRoom. No problems will arise with your Reservation domain as long as this new room implements the IRoom interface.



********************************************************************************************************************************************
### `FreeRoom` class extends the `Room` class. :heavy_check_mark:
**Though the FreeRoom class hasn't been really used but inheriting the Room class promotes the code reuse and ensures that there is no redundant code. ** :white_check_mark:

Inheritance promotes code reuse and discourages redundancy. Good job adding an extends relationship between Room and FreeRoom


********************************************************************************************************************************************
### Data encapsulation is present :heavy_check_mark:
**Great work encapsulating the data in all the model classes. Using appropriate access specifiers to ensure that the variables are accessible through the `getter` method. ** :white_check_mark:


Good job using data encapsulation in your models. Declaring 'private' variables and only exposing them via dedicated APIs reduces security concerns that may arise as a result of excess data exposure.


********************************************************************************************************************************************
### `toString()` method has been overridden in all the model classes. :white_check_mark:

Sometimes, we need better object descriptions when we print them to any output stream. Overriding the toString method to provide custom data is necessary in such cases. Good job meeting this requirement.


********************************************************************************************************************************************
### `equals` and `hashcode` methods have been overridden for `Customer` and `Room` class :white_check_mark:

Most of the students miss this specification in their first submission. Its great to see that you didn't :clap:


###   `equals` and `hashcode` have been overridden :x:

**You need to override `equals` and `hashcode` methods  for atleast one of the model classes ( `Room`, `Customer`, `Reservation` ) . As of now, you haven't done the same. **
***

**Additional Resources**:
**[ Here is a tutorial that explains the need to override the equals() and hashCode() methods ?](https://www.geeksforgeeks.org/override-equalsobject-hashcode-method/)**

Some developers overlook this but you are obviously not one of them. Bravo!! I once spent two hours figuring why duplicate objects were added to my Set and I later found out that I had committed these!!

The default equals() and hashcode() methods in the Objectclass do not provide unique definitions of objects and this can cause issues when using them with collections. Good job overriding these methods in the Room model. However, you should also do the same in the Reservation and Customer models.

********************************************************************************************************************************************

### Access modifiers  have been used correctly. :heavy_check_mark:

* **`public` access specifier has been used :white_check_mark: **
* **`private` access specifier has been used :white_check_mark: **
* **`final` access specifier has been used :white_check_mark:**


* Access modifiers `public` and `private` have been used correctly. :white_check_mark:
* You also need to use ` final ` in some of the data model class. :x:

You can read about the final variable here :point_right: [**Final Variable**](https://www.geeksforgeeks.org/final-keyword-java/)

********************************************************************************************************************************************
### Duplicate Reservations allowed

* **Duplicate reservations should not be allowed. Users should not be able to reserve the same room more than once within the same date range. As can be seen below, I was able to reserve a room between 10/10/2020 - 10/12/2020 twice!**



**You are storing the Rooms in an ArrayList. You should choose a Collection such that the duplicate entries are not allowed. For this you will have to override the `equals` and `hashcode` methods for the Room Model.**

### No Logic for Available Room Check
**Going through your code, I see that you haven't checked if  the room is already reserved for a given date range or not. You are checking the available  rooms and asking the user to book it. On booking you have simply printed the user Input :point_down:**



### 1. Collection has been used :heavy_check_mark:

**HashMap has been used to store the Room, Customer and Reservation data. :white_check_mark:**


### 2. Duplicate Reservations not allowed :heavy_check_mark:
**The application correctly handles `duplicate  room scenario`. Same room can be booked only once for a given date range, as can be seen below :white_check_mark:**

![1.gif](https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/263256/1651229283/1.gif)

********************************************************************************************************************************************

## Perfect !!
**The recommended rooms scenario is working flawlessly. The application shows the recommended rooms :point_down:**


**You haven't made use of the `Service`Package ( Reservation Service and Customer service class ). As can be seen from the screenshot below, all the functions of the ReservationService class are unused :point_down:**

**As mentioned in the course the application flow should be like :point_down:**

![App_Flow_Java.png](https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/263256/1620907962/App_Flow_Java.png)


## 1. for loop has been used to iterate and process the data :heavy_check_mark:
*** 
## 2. Recommended rooms requirement :heavy_check_mark:
**The recommended rooms scenario is working flawlessly. The application shows the recommended rooms correctly :point_down:**


##  Recommended rooms requirement :x:
There is a part of this specification which requires that - **When all rooms have been booked, you should look for rooms with an alternative date range. Add 7 days to the given input range (start date and end date) and look for rooms with the new range. If no rooms are found, you should let the users know. :point_down:**
![2022-06-04_11-30.png](https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/263256/1654363836/2022-06-04_11-30.png)

**Check the code review for MainMenu.java for more detail**



********************************************************************************************************************************************


### Good job using static references to create singletons in your application. :heavy_check_mark:
***
**Additional Resources**
* [You can read more about Singletons in Java here](https://www.baeldung.com/java-singleton#:~:text=For%20example%2C%20singletons%20are%20often,configuration%20for%20the%20test%20environment.)

**You need to create static references to create singletons in your application for the following classes :**
**1. Admin Resource **
**2. Hotel Resource **
**3. Reservation Service**
**4. Customer Service**

As of now, you have made every method inside these 4 classes as **static**. This is not the right way even though it solves the purpose.You need to make the classes as singleton such that they have only one instance variable which we call the methods. Doing this, we don't need to make every method as static. 
***
**Additional Resources**
**[You can read more about Singletons in Java here](https://www.baeldung.com/java-singleton#:~:text=For%20example%2C%20singletons%20are%20often,configuration%20for%20the%20test%20environment.)**
********************************************************************************************************************************************

**As mentioned in the previous review, you need to create atleast one method with `default` access identifier**.
Please make sure you work on this specification.

### Hint
You can create a method without any identifier and call this method in some other method.


Method with the following identifiers have been used used in the ReservationService class :
* `public` :white_check_mark: 
* `private` :white_check_mark:
* `default` :white_check_mark:


**You need to create atleast one method with `default` access identifier in the `ReservationService` class**.
Please make sure you work on this specification.

### Hint
You can create a method without any identifier and call this method in some other method.

********************************************************************************************************************************************


### Email Validation is present :heavy_check_mark:
**Great job validating customer emails. We really do not want to end up storing strings that are not valid emails as emails.:white_check_mark:**

********************************************************************************************************************************************

### **Application contains the enumeration class `RoomType` :heavy_check_mark:**
***
### Additional Resources
* **You can read more about Java Enums here: **[**Enums**](https://www.w3schools.com/java/java_enums.asp)

********************************************************************************************************************************************
### **Date objects have been used for check-in date and check-out date. :heavy_check_mark:**

**It is always important to use the correct types to represent data in our applications. Good job using Date objects for date and check-out date.**


********************************************************************************************************************************************
### **Exceptions have been correctly validated using the `try` and `catch` blocks :heavy_check_mark:**

**Exception handling is very important. Sometimes, we need to know when errors occur and trigger necessary actions/alerts. Other times, we just need to make sure that exceptions/errors don't block other tasks from being executed. There are many reasons why we need to provide good exception handling mechanisms.**

Great job meeting this requirement.
********************************************************************************************************************************************


### **Different datatypes have been used to store the data :heavy_check_mark:**

********************************************************************************************************************************************
### **`switch` statement has been used to handle the user input flow instead of the traditional if-else statements. :heavy_check_mark:**


**switch statements are sometimes more expressive than if-else statements. Great job meeting this requirement.**

You have used traditional if--else statements for user input flow. In order to meet this specification, you need to use the **switch** statement.  

### Additional Resources
You can read more about switch statements here : [**Switch statements**](https://www.javatpoint.com/java-switch)
********************************************************************************************************************************************


## Hi There !!

You have done a great job considering it was your first attempt. Most of the scenarios were successfully met.  **The application is self explanatory with proper messages on the console.** :clap:. You are close to the appropriate project,however you need to correct some points before you're all set to go. 

* **You need to override the `equals` and `hashcode` method for atleast one of the model classes.**
* **You need to use `final` access modifier in one of the model class **.
* **You need to use  the static references to create singletons in the application**
* **The application should not allow same room to be booked twice for a given date range**.
* ** The application should display recommended room in case there are no rooms available for a given date range. This is to be achieved by adding 7 to the checkin and checkout date**.
* **Use `default` access modifier for atleast one method in ReservationService class**.
* **Please use switch statements instead of if-else blocks for user input flow.**

Hope you make the required changes soon. We look forward to receiving your future project submissions soon .

***
**Resources: **
* [How to override the equals() and hashcode() method](https://www.baeldung.com/java-equals-hashcode-contracts)
* [Creating Singleton reference in Java](https://www.geeksforgeeks.org/singleton-class-java/)
* [ How to determine  if two dates overlap each other](https://www.soliantconsulting.com/blog/determining-two-date-ranges-overlap/) 

*** 
**PS:** If you have any doubts regarding any of the concept, feel free to search or post a question on [Knowledge](https://knowledge.udacity.com/) where many of the fellow students and mentors may have faced the same situation before and would have provided the appropriate steps to resolve it.


**Have a Good Day and Stay Safe ✌**

### Keep Learning and Stay Udacious
:udacious:

********************************************************************************************************************************************
## Congratulations !!
You have done a great job.Making the required changes and submitting the project in such a short span of time clearly shows your hardwork and dedication towards the project.The project meets all the required points. I like the fact that **you have split your code into methods and functions which makes the code more clean and easily readable**  :clap:

You did an excellent job on this project, I have enjoyed running and interacting with it. And you were able to apply all the changes quickly and efficiently. 👍👍

I hope this project was fun. Take a small break and prepare for the next battle.
We look forward to receiving your future project submissions soon .
Keep it Up !! Wishing you Best of Luck for journey ahead :)


***
**Resources :**
* Here is a good read about [**Future of Java**](https://stackoverflow.blog/2020/07/30/java-at-25-features-that-made-an-impact-and-a-look-to-the-future/).
* Some useful [**Tips and Tricks for Beginners**](https://www.javacodegeeks.com/2015/06/java-programming-tips-best-practices-beginners.html)

***

**PS:** If you have any doubts regarding any of the concept, feel free to search or post a question on [Knowledge](https://knowledge.udacity.com/) where many of the fellow students and mentors may have faced the same situation before and would have provided the appropriate steps to resolve it.


**Have a Good Day and Stay Safe ✌**

### Keep Learning and Stay Udacious
:udacious:

*********************************************************************************************************************************************

## Congratulations !!
You have done a great job.Making the required changes and submitting the project in such a short span of time clearly shows your hardwork and dedication towards the project.The project meets all the required points. I like the fact that **the application is self explanatory with proper messages on the console. Also you have split your code into methods and functions which makes the code more clean and easily readable. In short the application is totally user friendly**  :clap:

You did an excellent job on this project, I have enjoyed running and interacting with it. You have really worked hard on this project and the project is the reflection of it. The hard work did pay off and you have passed with flying colors. :rainbow:

I hope this project was fun. Take a small break and prepare for the next battle.
We look forward to receiving your future project submissions soon .
Keep it Up !! Wishing you Best of Luck for journey ahead :)


***
**Resources :**
* Here is a good read about [**Future of Java**](https://stackoverflow.blog/2020/07/30/java-at-25-features-that-made-an-impact-and-a-look-to-the-future/).
* Some useful [**Tips and Tricks for Beginners**](https://www.javacodegeeks.com/2015/06/java-programming-tips-best-practices-beginners.html)

***

**PS:** If you have any doubts regarding any of the concept, feel free to search or post a question on [Knowledge](https://knowledge.udacity.com/) where many of the fellow students and mentors may have faced the same situation before and would have provided the appropriate steps to resolve it.


**Have a Good Day and Stay Safe ✌**

### Keep Learning and Stay Udacious
:udacious:

************************************************************************************************************************************
https://knowledge.udacity.com/questions/624174#624187

**The submission is plagiarzied which can be seen from the images attached below :point_down:**
The submission is **PLAGIARIZED** only from the source mentioned in the project review :point_down:
Source - https://github.com/zeevolution/hotel-reservation/

## Hi !
Your project couldn't be reviewed due to **`PLAGIARISM`**. The project is the copy of a project of another student. **Most of the methods and class definitions are same as the other student's . Here are few instances that show line by line plagiarism.**

### Example 1 - Original Code

### Example 1 - Student's Code

***

### Example 2 - Original Code

### Example 2 - Student's Code

***
**You have broken UDACITY Honor Code . UDACITY takes plagiarism very seriously. This may lead to cancellation of nanodegree and your certifications can be revoked. Please make sure you make and submit your own project now.**
[**Consequences of PLAGIARISM**](https://udacity.zendesk.com/hc/en-us/articles/360001455151-Consequences-of-submitting-plagiarized-work)

Hope you make the required change soon.

**Have a Good Day and Stay Safe ✌**

### Keep Learning and Stay Udacious
:udacious:




Hi Georgi !!

Thanks for your quick reply. Now I understand your problem. So the only thing you are missing is the Recommended Room scenario which is mentioned .

Lets see what is expected :
The user enters check-in and check-out dates to reserve a room. If any room is available then those room are displayed.  (Till here your code works fine)
In case there are no room available, you need to show recommended rooms ie. add 7 to check-in and check-out dates and call the same method that you are using for point 1.

Lets see what has been done :
You have added a recommend() method in the Reservation service but it takes the same check-in and check-out dates as mentioned by the user.  

Let see what needs to be done
First of all,  you don't need the recommend() in Reservation service class. You can remove the function call and the corresponding definition.
In the MainMenu class, once the user enters the check-in and check-out dates and no rooms are available, in the else block, you need to write a logic for recommended rooms. (before line 118).


3. The logic is simple :
You need  to add 7 to check-in and check-out date. You could go through  for reference on how to do the same.
Call the findRoom() method with new check-in and check-out dates.
If any rooms are available, display those rooms else let the users know that there are no rooms available. 
4. You could either directly do all the  steps of Point 3 before line number 118 in MainMenu file or you could place the steps in a method ( say methodA() ) and call that method before line number 118.

So in short the  flow looks like :


Feel free to comment in case you have any other questions.
 
Hope that helps. 

PS : If you think this answer resolved your query, I would request you to mark it as Accepted so that it becomes easier for other student (who might face the similar situation in future)  to search for correct answer on Knowledge portal.

Thanku  !



PS : If you think the answer resolved you original query , please mark it as Accepted.  This would :
Close this thread so that it isn't assigned to any other mentor.
Help the student search for the correct solution on Knowledge, if anyone has similar doubt.



I hope to achieve a basic and fundamental knowledge about Machine Learning and try to utilize it with my existing FullStack development skills. During the college, i got interested in Java and Frontend  Development. Over the time I took many courses with Udacity (Free and Paid) to improve my skill set. I was provided with the opportunity to become a mentor for Mobile Web Specialist course which primarily focused on the frontend development . I accepted the opportunity,passed it and  provided support to a lot of students. By the end of college, I got an opportunity to work with a leading American telecommunication organization as Full-Stack Developer where I was exposed to Angular, React and Springboot. It made me even more interested into development. Since then I try to learn and share as much knowledge as I can and hope to do same by applying in this program.
